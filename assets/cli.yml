---
name: p
description: a concise, opinionated interface over pass
options:
  - name: password-store-dir
    short: P
    description: path to the password storage directory
    var: _p_pass_dir
  - name: gnupg-home-dir
    short: G
    description: path to the GnuPG home directory
    type: Directory
    var: _p_pass_gpg_dir
    aliases:
      - gpg-home-dir
  - name: remote-user
    short: RU
    description: username for remote ssh connection
    var: _p_remote_user
  - name: remote-host
    short: RH
    description: host for remote ssh connection
    var: _p_remote_host
  - name: remote-port
    short: RP
    description: port for remote ssh connection
    var: _p_remote_port
  - name: editor
    short: E
    description: editor to edit files with
    var: _p_editor
arguments:
  - name: cmd
    description: p command to run
    type: Subparser
    whitelist:
      - name: clone
        description: create a password store from a git repository
        group: Setup
        function: ___p_clone
        arguments:
          - name: uri
            description: URI that the git repository resides at
        grammar:
          - "[options]"
          - "arguments.uri"
        mixed_options_arguments: true
      - name: create
        description: create a password store from scratch
        group: Setup
        function: ___p_create
        options:
          - name: without-git
            short: n
            description: don't create the password store with git
            var: init_git
            type: TrueFalse
            aliases:
              - no-git
            antonyms:
              - with-git
              - git
        arguments:
          - name: gpg_id
            description: GPG Key ID to initialize password store with
            when: cmd == 'create'
        grammar:
          - "[options]"
          - "arguments.gpg_id"
        mixed_options_arguments: true
      - name: keys
        description: manage keys used to encrypt passwords
        group: Setup
        aliases:
          - key
        function: ___p_keys
        arguments:
          - name: key_cmd
            description: key management action
            type: Subparser
            whitelist:
              - name: init
                description: initialize the key manager
                function: ___p_key_init
                arguments:
                  - name: key_id
                    description: default key to use for key management
                grammar:
                  - "[options]"
                  - "arguments.key_id"
              - name: import
                description: import a key from gpg's database
                function: ___p_key_import
                arguments:
                  - name: key_nickname
                    description: nickname of the key to import
                  - name: key_id
                    description: GPG Key ID to import
                grammar:
                  - "[options]"
                  - arguments.key_nickname
                  - arguments.key_id
              - name: export
                description: export a key into GnuPG's database and sign it
                function: ___p_key_export
                arguments:
                  - name: key_nickname
                    description: nickname of the key to export
                grammar:
                  - "[options]"
                  - arguments.key_nickname
              - name: list
                description: list all keys in the key manager
                function: ___p_key_list
                grammar:
                  - "[options]"
              - name: regen
                description: recreate all .gpg-id files and re-encrypt passwords
                function: ___p_key_regen
                grammar:
                  - "[options]"
              - name: delete
                description: delete a key from the key manager
                function: ___p_key_delete
                arguments:
                  - name: key_nickname
                    description: nickname of the key to delete
                grammar:
                  - "[options]"
                  - arguments.key_nickname
              - name: rename
                description: change the nickname of a key
                function: ___p_key_rename
                arguments:
                  - name: key_old
                    description: nickname of the key to rename
                  - name: key_new
                    description: new name for the key
                grammar:
                  - "[options]"
                  - arguments.key_old
                  - arguments.key_new
              - name: update
                description: update a key in the database
                function: ___p_key_update
                arguments:
                  - name: key_nickname
                    description: nickname of the key to update
                grammar:
                  - "[options]"
                  - arguments.key_nickname
        mixed_options_arguments: false
        catch_remainder: true
        remainder: key_cmd_args
        grammar:
          - "[options]"
          - "arguments.key_cmd"
          - "[vars.key_cmd_args...]"
      - name: groups
        description: manage groups of keys used to encrypt passwords
        group: Setup
        aliases:
          - group
        function: ___p_groups
        arguments:
          - name: group_cmd
            description: group management action
            type: Subparser
            whitelist:
              - name: create
                description: create a new group
                function: ___p_group_create
                arguments:
                  - name: group_name
                    description: nickname of the group to create
                  - name: group_keys
                    description: nickname of the keys to add to the group
                    type: Array
                grammar:
                  - "[options]"
                  - arguments.group_name
                  - arguments.group_keys...
              - name: add
                description: add keys to a group
                function: ___p_group_add
                arguments:
                  - name: group_name
                    description: group to extend with new keys
                  - name: group_keys
                    description: nickname of the keys to add to the group
                    type: Array
                grammar:
                  - "[options]"
                  - arguments.group_name
                  - arguments.group_keys...
              - name: remove
                description: remove keys from a group
                function: ___p_group_remove
                arguments:
                  - name: group_name
                    description: group to remove keys from
                  - name: group_keys
                    description: nickname of the keys to remove from the group
                    type: Array
                grammar:
                  - "[options]"
                  - arguments.group_name
                  - arguments.group_keys...
              - name: delete
                description: delete a group
                function: ___p_group_delete
                arguments:
                  - name: group_name
                    description: group to extend with new keys
                grammar:
                  - "[options]"
                  - arguments.group_name
              - name: list
                description: list all groups
                function: ___p_group_list
        mixed_options_arguments: false
        catch_remainder: true
        remainder: group_cmd_args
        grammar:
          - "[options]"
          - "arguments.group_cmd"
          - "[vars.group_cmd_args...]"
      - name: dirs
        description: manage keys associated with directories
        group: Setup
        aliases:
          - dir
        function: ___p_dirs
        arguments:
          - name: dir_cmd
            description: directory management action
            type: Subparser
            whitelist:
              - name: create
                description: track a new directory
                function: ___p_dir_create
                arguments:
                  - name: dir_path
                    description: path of the directory to manage
                  - name: dir_keys
                    description: nickname of the keys or groups to encrypt the directory with
                    type: Array
                grammar:
                  - "[options]"
                  - arguments.dir_path
                  - arguments.dir_keys...
              - name: add
                description: add keys to a directory
                function: ___p_dir_add
                arguments:
                  - name: dir_path
                    description: directory to extend with new keys
                  - name: dir_keys
                    description: nickname of the keys to add to the directory
                    type: Array
                grammar:
                  - "[options]"
                  - arguments.dir_path
                  - arguments.dir_keys...
              - name: remove
                description: remove keys from a directory
                function: ___p_dir_remove
                arguments:
                  - name: dir_path
                    description: directory to remove keys from
                  - name: dir_keys
                    description: nickname of the keys to remove from the directory
                    type: Array
                grammar:
                  - "[options]"
                  - arguments.dir_path
                  - arguments.dir_keys...
              - name: delete
                description: delete keys for a directory
                function: ___p_dir_delete
                arguments:
                  - name: dir_path
                    description: directory to quit tracking keys for
                grammar:
                  - "[options]"
                  - arguments.dir_path
              - name: list
                description: list all directories
                function: ___p_dir_list
        mixed_options_arguments: false
        catch_remainder: true
        remainder: dir_cmd_args
        grammar:
          - "[options]"
          - "arguments.dir_cmd"
          - "[vars.dir_cmd_args...]"
      - name: gpg
        description: manage keys in GnuPG's database
        group: Setup
        function: ___p_gpg
        arguments:
          - name: gpg_cmd
            description: gpg management action
            type: Subparser
            whitelist:
              - name: generate
                description: generate a new GPG key
                function: ___p_gpg_generate
                arguments:
                  - name: gpg_name
                    description: name of the GPG key's owner
                  - name: gpg_email
                    description: email address for the GPG key
                  - name: gpg_password
                    description: password for the newly generated GPG key
                grammar:
                  - "[options]"
                  - arguments.gpg_name
                  - arguments.gpg_email
                  - '[arguments.gpg_password]'
              - name: import
                description: import a GPG key from a file
                function: ___p_gpg_import
                arguments:
                  - name: gpg_path
                    description: path to the GPG key to import
                grammar:
                  - "[options]"
                  - arguments.gpg_path
              - name: export
                description: export a GPG key to a file
                function: ___p_gpg_export
                arguments:
                  - name: gpg_id
                    description: identifier of the key to export
                  - name: gpg_path
                    description: path to write the key to
                grammar:
                  - "[options]"
                  - arguments.gpg_id
                  - arguments.gpg_path
              - name: list
                description: list all keys tracked by GPG
                function: ___p_gpg_list
                arguments:
                  - name: gpg_id
                    description: optionally list only keys matching id
                grammar:
                  - "[options]"
                  - "[arguments.gpg_id]"
              - name: password
                description: change the password on a key
                function: ___p_gpg_password
                arguments:
                  - name: gpg_id
                    description: unique identifier for the GPG key
                grammar:
                  - "[options]"
                  - arguments.gpg_id
              - name: trust
                description: trust and sign the specified GPG key
                function: ___p_gpg_trust
                arguments:
                  - name: gpg_id
                    description: unique identifier for the GPG key
                grammar:
                  - "[options]"
                  - arguments.gpg_id
        mixed_options_arguments: false
        catch_remainder: true
        remainder: gpg_cmd_args
        grammar:
          - "[options]"
          - "arguments.gpg_cmd"
          - "[vars.gpg_cmd_args...]"
      - name: cd
        description: change directories
        group: Basic navigation
        function: ___p_cd
        options:
          - name: absolute
            short: a
            var: cd_mode
            constant: absolute
            description: treat as an absolute path
            type: Constant
          - name: relative
            short: r
            var: cd_mode
            constant: relative
            description: treat as a relative path
            type: Constant
        arguments:
          - name: cd_path
            description: path to change into; absolute if prefixed with '/' or --absolute is specified, else relative
        grammar:
          - "[options]"
          - "[arguments.cd_path]"
        mixed_options_arguments: true
      - name: cp
        description: copy the contents of one file to another location
        group: Basic navigation
        aliases:
          - copy
        function: ___p_cp
        options:
          - name: force
            short: f
            type: FalseTrue
            description: silently overwrites destination if it exists
        arguments:
          - name: old_path
            description: existing path to copy from
          - name: new_path
            description: destination path to copy to
        mixed_options_arguments: true
        grammar:
          - "[options]"
          - arguments.old_path
          - arguments.new_path
      - name: ls
        description: list files and directories
        group: Basic navigation
        aliases:
          - list
        function: ___p_ls
        options:
          - name: directory
            aliases:
              - dir
            short: d
            type: FalseTrue
            description: list directories themselves, not their contents
          - name: all
            short: a
            type: FalseTrue
            description: list contents as they appear in the file system, not hiding extensions
        arguments:
          - name: ls_paths
            description: paths to inspect
            type: Array
        mixed_options_arguments: true
        grammar:
          - "[options]"
          - arguments.ls_paths...
      - name: mkdir
        description: make a new directory
        group: Basic navigation
        aliases:
          - m
        function: ___p_mkdir
        options:
          - name: recursive
            short: r
            type: FalseTrue
            alises:
              - parents
              - p
            description: recursively create the specified path
          - name: absolute
            short: a
            type: FalseTrue
            description: treat the specified path as an relative to /, even if not prefixed by /
        arguments:
          - name: mkdir_paths
            description: paths to create as directories
            type: Array
        mixed_options_arguments: true
        grammar:
          - "[options]"
          - arguments.mkdir_paths...
      - name: mv
        description: move a file to another location
        group: Basic navigation
        aliases:
          - move
        function: ___p_mv
        arguments:
          - name: mv_srcs
            description: paths to items to move
            type: Array
          - name: mv_dest
            description: path to new location for the specified objects
        grammar:
          - "[options]"
          - arguments.mv_srcs...
          - arguments.mv_dest
      - name: rm
        description: remove the specified path from the password store
        group: Basic navigation
        aliases:
          - remove
        function: ___p_rm
        options:
          - name: recursive
            short: r
            type: FalseTrue
            description: recursively remove the specified paths
        arguments:
          - name: rm_paths
            description: paths to remove
        mixed_options_arguments: true
        grammar:
          - "[options]"
          - arguments.rm_paths
      - name: cat
        description: show the contents of a password entry
        group: Managing passwords
        aliases:
          - show
          - c
        function: ___p_cat
        options:
          - name: raw
            short: r
            var: cat_raw
            type: FalseTrue
            description: raw, uncolorized, machine-readable output
          - name: json-only
            short: j
            var: cat_json_only
            type: FalseTrue
            aliases:
              - json
            description: only output the json portion of these password entries, if present
          - name: password-only
            short: p
            var: cat_password_only
            type: FalseTrue
            aliases:
              - password
            description: only output the first line of the password entry
          - name: no-color
            short: n
            var: cat_colorize
            antonyms:
              - with-color
              - colorize
              - color
            type: TrueFalse
            description: don't colorize the output
        arguments:
          - name: cat_paths
            description: paths of password entries to display
            type: Array
        mixed_options_arguments: true
        grammar:
          - "[options]"
          - arguments.cat_paths...
      - name: edit
        description: edit the contents of a file
        group: Managing passwords
        aliases:
          - e
        function: ___p_edit
        arguments:
          - name: edit_path
            description: path to the entry to open in an editor
        grammar:
          - "[options]"
          - arguments.edit_path
      - name: generate
        description: generate a new password
        group: Managing passwords
        aliases:
          - gen
        function: ___p_generate
        options:
          - name: format
            short: f
            description: format string for generated password
            type: String
          - name: random
            short: r
            var: mode
            type: Constant
            constant: random
            aliases:
              - rand
            description: generate a 30 alphanumeric character password
          - name: phrase
            short: p
            var: mode
            type: Constant
            constant: phrase
            description: generate a 3 word, 12 number phrase password
          - name: save
            short: s
            var: name
            description: save generated password to the specified password entry
        grammar:
          - "[options]"
      - name: json
        description: manipulate a JSON-encoded password file
        group: Managing passwords
        aliases:
          - j
        function: ___p_json
        arguments:
          - name: json_cmd
            description: json manipulation action
            type: Subparser
            whitelist:
              - name: get
                description: get a key's value from a file's JSON data
                aliases:
                  - g
                function: ___p_json_get
                arguments:
                  - name: file
                    var: j_file
                    description: file to read
                  - name: key
                    var: j_key
                    default: password
                    description: key to read out of the file; defaults to password
                grammar:
                  - "[options]"
                  - "arguments.file"
                  - "[arguments.key]"
              - name: set
                description: set a key's value in a file's JSON data
                aliases:
                  - s
                function: ___p_json_set
                arguments:
                  - name: file
                    var: j_file
                    description: file to write
                  - name: key
                    var: j_key
                    description: key to set in the file
                  - name: value
                    var: j_value
                    description: value of the key
                grammar:
                  - "[options]"
                  - "arguments.file"
                  - "[arguments.key]"
                  - "arguments.value"
              - name: retype
                description: type the key's value from a file's JSON data
                aliases:
                  - r
                  - type
                  - t
                function: ___p_json_retype
                arguments:
                  - name: file
                    var: j_file
                    description: file to read
                  - name: key
                    var: j_key
                    default: password
                    description: key to read out of the file; defaults to password
                grammar:
                  - "[options]"
                  - "arguments.file"
                  - "[arguments.key]"
              - name: kinit
                description: obtain a Kerberos ticket from information in the specified file's JSON data
                aliases:
                  - k
                function: ___p_json_kinit
                arguments:
                  - name: file
                    var: j_file
                    description: file to read
                grammar:
                  - "[options]"
                  - "arguments.file"
        mixed_options_arguments: false
        catch_remainder: true
        remainder: json_cmd_args
        grammar:
          - "[options]"
          - "arguments.json_cmd"
          - "[vars.json_cmd_args...]"
      - name: find
        description: list all files in the password store
        group: Search commands
        function: ___p_find
        add_help: false
        catch_remainder: true
        remainder: find_args
        grammar:
          - "[vars.find_args...]"
      - name: locate
        description: locate files and directories matching a pattern
        group: Search commands
        aliases:
          - lt
        function: ___p_locate
        arguments:
          - name: substr
            description: substring to match in the path
            type: Array
        grammar:
          - "[options]"
          - "arguments.substr..."
      - name: search
        description: search the contents of files for a match
        group: Search commands
        aliases:
          - grep
        function: ___p_search
        arguments:
          - name: grep_options
            description: additional arguments to pass to grep
            type: Array
          - name: search_regex
            description: regex to pass to grep
        grammar:
          - "[options]"
          - "[arguments.grep_options...]"
          - arguments.search_regex
      - name: decrypt
        description: extract (decrypt) a file in the password store
        group: Storing files
        function: ___p_decrypt
        options:
          - name: permissions
            short: p
            description: permissions for the file to be created
            type: String
            default: 600
          - name: owner
            short: u
            description: owner for the file to be created
            type: String
        arguments:
          - name: entry
            description: vault entry to decrypt
          - name: result_path
            description: filesystem path to store the decrypted file at
        grammar:
          - "[options]"
          - "arguments.entry"
          - "[arguments.result_path]"
      - name: encrypt
        description: store a file into the password store
        group: Storing files
        function: ___p_encrypt
        arguments:
          - name: file_path
            description: filesystem path to read
          - name: entry
            description: vault entry to encrypt to
        grammar:
          - "[options]"
          - arguments.file_path
          - arguments.entry
      - name: open
        description: run a command to view a file in the password store
        group: Storing files
        function: ___p_open
        options:
          - name: read-only
            short: r
            description: do not save changes made to the file
            type: FalseTrue
          - name: no-lock
            short: l
            description: do not try to acquire a lock before opening the file
            type: FalseTrue
        arguments:
          - name: open_entry
            description: password entry to open
          - name: open_command
            description: command
            type: Array
        mixed_options_arguments: false
        grammar:
          - "[options]"
          - "arguments.open_entry"
          - "arguments.open_command..."
      - name: git
        description: run git commands in the password store
        aliases:
          - gt
        function: ___p_git
        add_help: false
        catch_remainder: true
        remainder: git_args
        grammar:
          - "[vars.git_args...]"
      - name: pass
        description: pass a command through to pass (for accessing extensions)
        aliases:
          - through
          - thru
          - t
        function: ___p_through
        add_help: false
        catch_remainder: true
        remainder: pass_args
        grammar:
          - "[vars.pass_args...]"
      - name: sync
        description: sync a local branch with a remote one
        function: ___p_sync
        arguments:
          - name: branch
            description: local branch to sync from; defaults to the current branch
          - name: origin
            description: remote origin to sync to; defaults to origin
            default: origin
          - name: remote
            description: remote branch to sync to; defaults to master
            default: master
        grammar:
          - "[options]"
          - "[arguments.branch]"
          - "[arguments.origin]"
          - "[arguments.remote]"
      - name: ssh
        description: connect to remote machine with identity stored in pass
        group: Managing passwords
        function: ___p_ssh
        arguments:
          - name: host
            description: remote host to connect to
          - name: identity
            description: identity file (within pass) to use
        catch_remainder: true
        remainder: ssh_args
        grammar:
          - "[options.help]"
          - "arguments.host"
          - "arguments.identity"
          - "[vars.ssh_args...]"
mixed_options_arguments: false
catch_remainder: true
remainder: _p_cmd_args
function: _p
grammar:
  - "[options]"
  - "arguments.cmd"
  - "[vars._p_cmd_args...]"
